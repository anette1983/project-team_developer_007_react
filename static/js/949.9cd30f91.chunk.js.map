{"version":3,"file":"static/js/949.9cd30f91.chunk.js","mappings":"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","sources":["webpack://project-team_developer_007_react/./src/components/LoadingNotice/LoadingNotice.module.css?29a4","components/LoadingNotice/LoadingNotice.jsx","webpack://project-team_developer_007_react/./src/components/LogInForm/LogInForm.module.css?b51d","components/LogInForm/LogInForm.jsx","pages/SignInPage/SignInPage.jsx","webpack://project-team_developer_007_react/./src/components/SignUpForm/SignUpForm.module.css?655f"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"LoadingNotice_wrapper__Eiv-5\",\"text\":\"LoadingNotice_text__a0U9f\"};","import React from 'react';\nimport Loader from '../Loader';\nimport css from './LoadingNotice.module.css';\n\nconst LoadingNotice = () => {\n  return (\n    <div className={css.wrapper}>\n      <Loader />\n      <p className={css.text}>The database is loading...</p>\n      <p className={css.text}>\n        It may take up to 30 seconds to retrieve data from the database for the\n        first time. We apologize for any inconveniences.\n      </p>\n    </div>\n  );\n};\n\nexport default LoadingNotice;\n","// extracted by mini-css-extract-plugin\nexport default {\"LogIn__title\":\"LogInForm_LogIn__title__M5f1N\",\"LogIn__label\":\"LogInForm_LogIn__label__1EEEB\"};","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { Link } from 'react-router-dom';\nimport * as yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport sprite from '../../images/svg/sprite.svg';\nimport css from '../SignUpForm/SignUpForm.module.css';\nimport css_logIn from './LogInForm.module.css';\n\nconst initialValues = { email: '', password: '' };\n\nconst emailRegexp = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n\nconst schema = yup.object().shape({\n  email: yup.string().matches(emailRegexp, 'Email is not valid').required(),\n  password: yup.string().min(6).required(),\n});\n\nexport const LogInForm = () => {\n  const dispatch = useDispatch();\n\n  const handleFormSubmit = (values, { resetForm }) => {\n    dispatch(logIn(values));\n\n    resetForm();\n  };\n\n  return (\n    <section className={css.Registration__Section}>\n      <div className={css.SignIn__container}>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={schema}\n          validateOnChange={false}\n          validateOnBlur={false}\n          onSubmit={handleFormSubmit}\n        >\n          {({ errors, touched, values }) => (\n            <Form className={css.Registration__form}>\n              <b className={css_logIn.LogIn__title}>Sign In</b>\n\n              <label className={css_logIn.LogIn__label}>\n                <div className={css.Registration__inputwrapper}>\n                  <Field\n                    className={`${css.Registration__input} ${\n                      touched.email && errors.email\n                        ? `${css.Registration__input_error}`\n                        : touched.email &&\n                          !errors.email &&\n                          emailRegexp.test(values.email)\n                        ? `${css.Registration__input_success}`\n                        : ''\n                    }`}\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"Email\"\n                    required\n                  />\n                  <ErrorMessage\n                    name=\"email\"\n                    render={msg => (\n                      <p className={css.Registration__error}>{msg}</p>\n                    )}\n                  />\n\n                  <svg\n                    width={18}\n                    height={18}\n                    className={`${css.Registration__svg} ${\n                      touched.email && errors.email\n                        ? `${css.Registration__svg_error}`\n                        : touched.email &&\n                          !errors.email &&\n                          emailRegexp.test(values.email)\n                        ? `${css.Registration__svg_success}`\n                        : ''\n                    }`}\n                  >\n                    <use href={sprite + '#reg-email'} />\n                  </svg>\n                  \n                   <svg\n                    width={20}\n                    height={20}\n                    className={`${css.Registration__svg_succ} ${\n                      touched.email && errors.email\n                        ? `${css.Registration__svg_error}`\n                        : touched.email &&\n                          !errors.email &&\n                          emailRegexp.test(values.email)\n                        ? `${css.Registration__svg_success}`\n                        : ''\n                    }`}\n                  >\n                    <use href={sprite + '#input-succ'} />\n                  </svg>\n                  \n                  <svg\n                    width={20}\n                    height={20}\n                    className={`${css.Registration__svg_err} ${\n                      touched.email && errors.email\n                        ? `${css.Registration__svg_error}`\n                        : touched.email &&\n                          !errors.email &&\n                          emailRegexp.test(values.email)\n                        ? `${css.Registration__svg_success}`\n                        : ''\n                    }`}\n                  >\n                    <use href={sprite + '#input-err'} />\n                  </svg>\n                </div>\n              </label>\n\n              <label className={css_logIn.LogIn__label}>\n                <div className={css.Registration__inputwrapper}>\n                  <Field\n                    className={`${css.Registration__input} ${\n                      touched.password && errors.password\n                        ? `${css.Registration__input_error}`\n                        : touched.password &&\n                          !errors.password &&\n                          values.password.length >= 6\n                        ? `${css.Registration__input_success}`\n                        : ''\n                    }`}\n                    type=\"password\"\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    required\n                  />\n                  <ErrorMessage\n                    name=\"password\"\n                    render={msg => (\n                      <p className={css.Registration__error}>\n                        Enter a valid Password\n                      </p>\n                    )}\n                  />\n\n                  <svg\n                    width={18}\n                    height={18}\n                    className={`${css.Registration__svg} ${\n                      touched.password && errors.password\n                        ? `${css.Registration__svg_error}`\n                        : touched.password &&\n                          !errors.password &&\n                          values.password.length >= 6\n                        ? `${css.Registration__svg_success}`\n                        : ''\n                    }`}\n                  >\n                    <use href={sprite + '#reg-pass'} />\n                  </svg>\n                  \n                  <svg\n                    width={20}\n                    height={20}\n                    className={`${css.Registration__svg_succ} ${\n                      touched.password && errors.password\n                        ? `${css.Registration__svg_error}`\n                        : touched.password &&\n                          !errors.password &&\n                          values.password.length >= 6\n                        ? `${css.Registration__svg_success}`\n                        : ''\n                    }`}\n                  >\n                    <use href={sprite + '#input-succ'} />\n                  </svg>\n                  \n                  <svg\n                    width={20}\n                    height={20}\n                    className={`${css.Registration__svg_err} ${\n                      touched.password && errors.password\n                        ? `${css.Registration__svg_error}`\n                        : touched.password &&\n                          !errors.password &&\n                          values.password.length >= 6\n                        ? `${css.Registration__svg_success}`\n                        : ''\n                    }`}\n                  >\n                    <use href={sprite + '#input-err'} />\n                  </svg>\n                </div>\n              </label>\n\n              <button className={css.Registration__button} type=\"submit\">\n                Sign In\n              </button>\n            </Form>\n          )}\n        </Formik>\n        <Link className={css.Registration__link} to=\"/register\">\n          Registration\n        </Link>\n      </div>\n    </section>\n  );\n};\n","import { LogInForm } from 'components/LogInForm/LogInForm';\nimport { useSelector } from 'react-redux';\nimport { selectAuthError, selectIsLoading } from 'redux/auth/selectors';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { clearErrorMessage } from 'redux/auth/slice';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport LoadingNotice from 'components/LoadingNotice/LoadingNotice';\n\nconst SignInPage = () => {\n  const error = useSelector(selectAuthError);\n  const isLoading = useSelector(selectIsLoading);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (error && error !== 'Unable to fetch user') {\n      error !== 'Request failed with status code 401' && Notify.failure(error);\n      dispatch(clearErrorMessage());\n    }\n\n    return () => {\n      dispatch(clearErrorMessage());\n    };\n  }, [dispatch, error, isLoading]);\n\n  return (\n    <>\n      {isLoading && <LoadingNotice />}\n      <LogInForm />\n    </>\n  );\n};\n\nexport default SignInPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"Registration__Section\":\"SignUpForm_Registration__Section__My4Ys\",\"Registration__container\":\"SignUpForm_Registration__container__ou-63\",\"SignIn__container\":\"SignUpForm_SignIn__container__vrPWm\",\"Registration__form\":\"SignUpForm_Registration__form__vYYLk\",\"Registration__title\":\"SignUpForm_Registration__title__Q8P7x\",\"Registration__label\":\"SignUpForm_Registration__label__BIh-q\",\"Registration__input\":\"SignUpForm_Registration__input__woy2a\",\"Registration__button\":\"SignUpForm_Registration__button__K3mhK\",\"Registration__link\":\"SignUpForm_Registration__link__DIztg\",\"Registration__error\":\"SignUpForm_Registration__error__rF721\",\"Registration__input_success\":\"SignUpForm_Registration__input_success__OycYd\",\"Registration__input_error\":\"SignUpForm_Registration__input_error__9kTvw\",\"Registration__inputwrapper\":\"SignUpForm_Registration__inputwrapper__M5hn7\",\"Registration__svg\":\"SignUpForm_Registration__svg__XohDY\",\"Registration__svg_succ\":\"SignUpForm_Registration__svg_succ__baGe9\",\"Registration__svg_err\":\"SignUpForm_Registration__svg_err__41yln\",\"Registration__svg_success\":\"SignUpForm_Registration__svg_success__4+Cq3\",\"Registration__svg_error\":\"SignUpForm_Registration__svg_error__gGuSA\"};"],"names":["className","css","Loader","initialValues","email","password","emailRegexp","schema","yup","shape","matches","required","min","LogInForm","dispatch","useDispatch","validationSchema","validateOnChange","validateOnBlur","onSubmit","values","resetForm","logIn","errors","touched","css_logIn","test","type","name","placeholder","render","msg","width","height","href","sprite","length","to","error","useSelector","selectAuthError","isLoading","selectIsLoading","useEffect","Notify","clearErrorMessage","LoadingNotice"],"sourceRoot":""}